# Multi-stage build for minimal Go container
FROM golang:1.24-alpine AS builder

# Install ca-certificates for HTTPS requests
RUN apk add --no-cache ca-certificates tzdata git upx

# Create app directory
WORKDIR /build

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build static binary with optimizations and minified embedded assets
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
  -ldflags='-w -s -extldflags "-static"' \
  -a -installsuffix cgo \
  -o pws . && upx --best pws

# Final stage: scratch image for minimal size
FROM scratch

# Copy ca-certificates for HTTPS requests
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Create passwd file for nonroot user
COPY --from=builder /etc/passwd /etc/passwd

# Copy the binary (static assets are now embedded)
COPY --from=builder /build/pws /app/pws

# Set working directory
WORKDIR /app

# Use nonroot user
USER nobody

# Expose port
EXPOSE 8080

# Run the binary
ENTRYPOINT ["./pws"]
